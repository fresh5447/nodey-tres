{
  "_args": [
    [
      "passport-openid@0.3.x",
      "/Users/Douglas/code/nodey-tres/node_modules/passport-google"
    ]
  ],
  "_from": "passport-openid@>=0.3.0 <0.4.0",
  "_id": "passport-openid@0.3.1",
  "_inCache": true,
  "_location": "/passport-openid",
  "_npmUser": {
    "email": "jaredhanson@gmail.com",
    "name": "jaredhanson"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {
    "pause": "0.0.1",
    "pkginfo": "0.2.3"
  },
  "_requested": {
    "name": "passport-openid",
    "raw": "passport-openid@0.3.x",
    "rawSpec": "0.3.x",
    "scope": null,
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/passport-google"
  ],
  "_resolved": "https://registry.npmjs.org/passport-openid/-/passport-openid-0.3.1.tgz",
  "_shasum": "e64de04859fa51b6529480174122621e08fa22cb",
  "_shrinkwrap": null,
  "_spec": "passport-openid@0.3.x",
  "_where": "/Users/Douglas/code/nodey-tres/node_modules/passport-google",
  "author": {
    "email": "jaredhanson@gmail.com",
    "name": "Jared Hanson",
    "url": "http://www.jaredhanson.net/"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-openid/issues"
  },
  "dependencies": {
    "openid": "0.5.x",
    "passport": "~0.1.3",
    "pkginfo": "0.2.x"
  },
  "description": "OpenID authentication strategy for Passport.",
  "devDependencies": {
    "vows": "0.6.x"
  },
  "directories": {},
  "dist": {
    "shasum": "e64de04859fa51b6529480174122621e08fa22cb",
    "tarball": "http://registry.npmjs.org/passport-openid/-/passport-openid-0.3.1.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "keywords": [
    "auth",
    "authentication",
    "authn",
    "identity",
    "openid",
    "passport"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-openid",
  "maintainers": [
    {
      "name": "jaredhanson",
      "email": "jaredhanson@gmail.com"
    }
  ],
  "name": "passport-openid",
  "optionalDependencies": {},
  "readme": "# Passport-OpenID\n\n[Passport](https://github.com/jaredhanson/passport) strategy for authenticating\nwith [OpenID](http://openid.net/).\n\nThis module lets you authenticate using OpenID in your Node.js applications.  By\nplugging into Passport, OpenID authentication can be easily and unobtrusively\nintegrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-openid\n\n## Usage\n\n#### Configure Strategy\n\nThe OpenID authentication strategy authenticates users using an OpenID\nidentifier.  The strategy requires a `validate` callback, which accepts this\nidentifier and calls `done` providing a user.  Additionally, options can be\nsupplied to specify a return URL and realm.\n\n    passport.use(new OpenIDStrategy({\n        returnURL: 'http://localhost:3000/auth/openid/return',\n        realm: 'http://localhost:3000/'\n      },\n      function(identifier, done) {\n        User.findByOpenID({ openId: identifier }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'openid'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.post('/auth/openid',\n      passport.authenticate('openid'));\n\n    app.get('/auth/openid/return', \n      passport.authenticate('openid', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n      \n#### Saving Associations\n\nAssociations between a relying party and an OpenID provider are used to verify\nsubsequent protocol messages and reduce round trips.  In order to take advantage\nof this, an application must store these associations.  This can be done by\nregistering functions with `saveAssociation` and `loadAssociation`.\n\n    strategy.saveAssociation(function(handle, provider, algorithm, secret, expiresIn, done) {\n      // custom storage implementation\n      saveAssoc(handle, provider, algorithm, secret, expiresIn, function(err) {\n        if (err) { return done(err) }\n        return done();\n      });\n    });\n\n    strategy.loadAssociation(function(handle, done) {\n      // custom retrieval implementation\n      loadAssoc(handle, function(err, provider, algorithm, secret) {\n        if (err) { return done(err) }\n        return done(null, provider, algorithm, secret)\n      });\n    });\n\n## Examples\n\nFor a complete, working example, refer to the [signon example](https://github.com/jaredhanson/passport-openid/tree/master/examples/signon).\n\n## Strategies using OpenID\n\n<table>\n  <thead>\n    <tr><th>Strategy</th></tr>\n  </thead>\n  <tbody>\n     <tr><td><a href=\"https://github.com/rajaraodv/passport-cloudfoundry-openidconnect\">Cloud Foundry UAA (OpenID Connect)</a></td></tr>\n    <tr><td><a href=\"https://github.com/jaredhanson/passport-google\">Google</a></td></tr>\n    <tr><td><a href=\"https://github.com/liamcurry/passport-steam\">Steam</a></td></tr>\n    <tr><td><a href=\"https://github.com/jaredhanson/passport-yahoo\">Yahoo!</a></td></tr>\n  </tbody>\n</table>\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-openid.png)](http://travis-ci.org/jaredhanson/passport-openid)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-openid.git"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js test/**/*-test.js"
  },
  "version": "0.3.1"
}
